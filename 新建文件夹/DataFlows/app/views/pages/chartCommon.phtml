<div id="chart-common"></div>


<script>
	f1.metrics = undefined;
    f1.flow_id = p["chartCommon"].param.flowId;
    f1.node = p["chartCommon"].param.node;
    console.debug(f1.flow_id);
    console.debug(f1.node.attr("id"));
    f1.queryNodeMetricInfo = function () {
        $.ajax({
            url: "/query/metric",
            async: true,
            type: 'POST',
            data: {"fid": f1.flow_id, "node": f1.node.attr("id")},
            success: function (text, textStatus) {
                f1.metrics = JSON.parse(text).message;
                console.log(f1.metrics)
                f1.queryNodeMetrics(f1.metrics[0].chart_type, f1.metrics[0].metric_name, JSON.parse(f1.metrics[0].chart_options));
                $('#chartCommon').attr('data-orderby',f1.metrics[0].orderby-1);
                $('#chartCommon').attr('data-orderbyMax',f1.metrics[f1.metrics.length-1].orderby-1);
            }
        });
    };
    f1.queryNodeMetricInfo();

    f1.queryNodeMetrics = function (chart_type, metric_name, chart_options) {
        console.debug(chart_options);

        var url = "http://ds.idc.xiwanglife.com/dataservice/getconfig.do?id=143&chart_type=" + chart_type + "&metric_name=" + metric_name;
        console.debug(url);
        $.ajax({
            url: url,
            async: true,
            type: 'POST',
            success: function (text, textStatus) {
                //var o = JSON.parse(text);
                console.debug(text.details.list.values);
                var list = text.details.list.values;
                var x = [];
                var y = [];
                for (var i = 0; i < list.length; i++) {
                    x.push(list[i].x_axis);
                    y.push(list[i].y_axis);
                }
                chart_options.x = x;
                chart_options.y = y;
                console.debug(x);
                console.debug(y);
                bar("chart-common", chart_options);
            }
        });
    };
    var startPos = {};
    // touch
	var slider = {
	    //判断设备是否支持touch事件
	    touch:('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch,
	    slider:document.getElementById('chartCommon'),
	    //事件
	    events:{
	        slider:document.getElementById('chartCommon'),     //this为slider对象
	        handleEvent:function(event){
	            var self = this;     //this指events对象
	            if(event.type == 'touchstart'){
	                self.start(event);
	            }else if(event.type == 'touchmove'){
	                self.move(event);
	            }else if(event.type == 'touchend'){
	                self.end(event);
	            }
	        },
	        //滑动开始
	        start:function(event){
	            var touch = event.targetTouches[0];     //touches数组对象获得屏幕上所有的touch，取第一个touch
	            startPos = {x:touch.pageX,y:touch.pageY,time:+new Date};    //取第一个touch的坐标值
	            isScrolling = 0;   //这个参数判断是垂直滚动还是水平滚动
	            this.slider.addEventListener('touchmove',this,false);
	            this.slider.addEventListener('touchend',this,false);
	        },
	        //移动
	        move:function(event){
	            //当屏幕有多个touch或者页面被缩放过，就不执行move操作
	            if(event.targetTouches.length > 1 || event.scale && event.scale !== 1) return;
	            var touch = event.targetTouches[0];
	            endPos = {x:touch.pageX - startPos.x,y:touch.pageY - startPos.y};
	            isScrolling = Math.abs(endPos.x) < Math.abs(endPos.y) ? 1:0;    //isScrolling为1时，表示纵向滑动，0为横向滑动
	            if(isScrolling === 0){
	                event.preventDefault();      //阻止触摸事件的默认行为，即阻止滚屏
	            }
	        },
	        //滑动释放
	        end:function(event){
	            var duration = +new Date - startPos.time;    //滑动的持续时间
    			var orderby = this.slider.getAttribute('data-orderby');// 当前显示chart的索引；
    			var orderbyMax = this.slider.getAttribute('data-orderbyMax');// 当前显示chart的索引；
	            if(isScrolling === 0){ return   //当为水平滚动时
	                /*if(Number(duration) > 30){     
	                    //判断是左移还是右移，当偏移量大于50时执行
	                    if(endPos.x > 50){
	                    	
	                    }else if(endPos.x < -50){
	                    	if(orderby === 0)return;
	                    }
	                }*/
	            }else{
	            	if(Number(duration) > 30){     
	                    //判断是下移还是上移，当偏移量大于50时执行
	                    if(endPos.y > 50){
	                    	if(orderby == 0)return;
	                    	var count = parseInt(orderby)-1;
	                    	this.slider.setAttribute('data-orderby',count);
	                    	$('#chart-common').empty();
	                    	f1.queryNodeMetrics(f1.metrics[count].chart_type, f1.metrics[count].metric_name, JSON.parse(f1.metrics[count].chart_options));
	                    }else if(endPos.y < -50){
	                    	if(orderby == orderbyMax)return;
	                    	var count = parseInt(orderby)+1;
	                    	this.slider.setAttribute('data-orderby',count);
	                    	$('#chart-common').empty();
	            			f1.queryNodeMetrics(f1.metrics[count].chart_type, f1.metrics[count].metric_name, JSON.parse(f1.metrics[count].chart_options));
	                    }
	                }
	            }
	            //解绑事件
	            this.slider.removeEventListener('touchmove',this,false);
	            this.slider.removeEventListener('touchend',this,false);
	        }
	    },
	    
	    //初始化
	    init:function(){
	        var self = this;     //this指slider对象
	        if(!!self.touch) self.slider.addEventListener('touchstart',self.events,false);    //addEventListener第二个参数可以传一个对象，会调用该对象的handleEvent属性
	    }
	};

slider.init();
</script>