<?php

namespace backend\controllers;
use backend\models\SalePrice;
use backend\models\ParamsSet;
use backend\models\VatSettion;
use common\models\Settlement;
use common\models\Accounting;
use backend\models\search\IndexSearch;
use backend\models\search\ImproveSearch;
use common\models\Profit;
use yii\data\Pagination;
use yii\linslin\Curl;
use Yii;

/**
 * 运营管理
 * @author longfei <phphome@qq.com>
 */
class OperationController extends BaseController
{
    /**
     * @return string
     *
     * 销售收入查询
     */
    public function actionIndex()
    {
        $searchModel = new IndexSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * @return string
     *
     * 客户授权查询
     */
    public function actionImprove()
    {
        $searchModel = new ImproveSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
        return $this->render('improve', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * @return string
     *
     * 结算申请查询
     */
    public function actionApply()
    {
        $searchModel = new \backend\models\search\SettlementSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
        return $this->render('apply',[
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     *
     * 结算申请审核
     *
     */

    public function actionPass()
    {
        $param = Yii::$app->request->get();


            if($param['ask_status'] == Settlement::ASK_STATUS_REJECT){
                $transaction = Yii::$app->db->beginTransaction();
                try{
                    $query = Accounting::find()->where(['doc_no'=>$param['settlement_no']])-> one();
                    if($query -> delete()){
                        if(\common\lib\Common::updateBalance(Yii::$app->user->identity->account_id))
                        {
                            $settlement = Settlement::find()->where(['settlement_no'=>$param['settlement_no']])->one();
                            $settlement -> ask_status = Settlement::ASK_STATUS_REJECT;
                            $settlement -> update_time = time();
                            if($settlement -> save()){
                                $transaction->commit();
                                $this -> success('操作成功');
                            }else{
                                $transaction->rollBack();
                                $this -> error('操作失败，请重新操作');
                            }
                        }

                    }else{
                        $transaction->rollBack();
                        $this -> error('操作失败，请重新操作');
                    }
                }catch( \Exception $e){
                    $transaction->rollBack();
                    $this -> error('操作失败，请重新操作');
                }
            }else{
                $settlement = Settlement::find()->where(['settlement_no'=>$param['settlement_no']])->one();
                $settlement -> ask_status = Settlement::ASK_STATUS_PASS;
                $settlement -> update_time = time();
                if($settlement -> save()){
                    $this -> success('操作成功');
                }else{
                    $this -> error('操作失败，请重新操作');
                }
            }

    }

    /**
     * @return string
     *
     * 付款确认列表
     */
    public function actionInsure()
    {
        $this->setForward();
        $searchModel = new \backend\models\search\SettlementSearch();
        $dataProvider = $searchModel->playMoneySearch(Yii::$app->request->queryParams);
        return $this->render('insure',[
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
            'payStatus' => \common\models\Settlement::gePayStatusMap()
        ]);
    }

    /**
     * @return string
     *
     * 付款确认操作
     */
    public function actionInsurepay()
    {
        $id = Yii::$app->request->get('id');
        if( $id ){
            $where = [
                'id' => $id,
                'ask_status' => Settlement::ASK_STATUS_PASS,
                'pay_status' => Settlement::PAY_STATUS_WAIT,
            ];
            $settlementInfo = Settlement::find()->where($where)->one();
            if( $settlementInfo ){
                //打款分钱
                $where = [
                    'account_id' => $settlementInfo->account_id,
                    'status' => Accounting::STATUS_RESERVE,
                    'doc_type' => Accounting::DOC_TYPE_OUTCOME,
                ];
                $accountInfo = Accounting::find()->where($where)->one();
                if($accountInfo){
                    //判断个人还是企业申请
                    $where = [
                        'account_id' => $settlementInfo->account_id,
                        'status' => \common\models\Agent::STATUS_USED
                    ];
                    $agentInfo = \common\models\Agent::find()->where($where)->asArray()->one();
                    $isPersonFax = false;
                    if( $agentInfo  ){
                        //判断是不是二级代理
                        if( $agentInfo['level'] == \common\models\Agent::LEVEL_SECOND){
                            //个人提现
                            $isPersonFax = true;
                        }else{
                            //企业提现
                        }
                    }else{
                        //个人提现
                        $isPersonFax = true;
                    }
                    $transaction = Yii::$app->db->beginTransaction();
                    try{
                        //更新流水账务
                        $accountInfo->status = Accounting::STATUS_ACTUAL;
                        $accountInfo->account_date = time();
                        $accountInfo->update_time = time();
                        //更新打款信息
                        //代缴所得税
                        $faxInfo = \common\lib\Common::personalFax($isPersonFax,$settlementInfo->amount);
                        $settlementInfo->income_tax = $faxInfo['income_tax'];
                        //实际打款金额
                        $settlementInfo->pay_amount = $faxInfo['pay_amount'];
                        //状态更改
                        $settlementInfo->pay_status = Settlement::PAY_STATUS_PASS;
                        if( $accountInfo->save() && $settlementInfo->save() ){
                            $transaction->commit();
                            \common\lib\Common::updateBalance($settlementInfo['account_id']);
                            $this->success('打款成功',$this->getForward());
                        }else{
                            $transaction->rollBack();
                            $this->error('操作失败，请稍后再试');
                        }
                    }catch(\Exception $e){
                        $transaction->rollBack();
                        $this->error('操作失败，请稍后再试');
                    }
                }else{
                    $this->error('没有查到流水申请账务信息，无法打款');
                }
                
            }else{
                $this->error('该申请状态异常，无法打款');
            }
        }
    }
    
    /**
     * @return string
     *
     * 参数设置
     */
    public function actionSetting()
    {
        $model = ParamsSet::findOne(1);
        if (Yii::$app->request->isPost) {
            /* 表单验证 */
            $data = Yii::$app->request->post('ParamsSet');
            $data['update_time'] = time();
            $model->setAttributes($data);
            /* 保存用户数据到数据库 */
            if ($model->save()) {
                $this->success('操作成功');
            }else{
                var_dump($model->errors);die;
                $this->error('操作错误');
            }
        }

        return $this->render('setting', [
            'model' => $model,
        ]);
    }

    /**
     * @return string
     *
     * 销售价格设置
     */
    public function actionPrice()
    {
        //$this->layout="main";
        if(Yii::$app->request->isPost){
            $postData = Yii::$app->request->post();
//echo "<pre>";print_r($postData);die;
            $list = SalePrice::find()->all();
            foreach($list as $row){
                $suffix = 'si' . $row->id . '_';
                foreach( $postData as $pKey => $pValue ){
                    if( strpos($pKey,$suffix) !== false ){
                        $row->{str_replace($suffix,'',$pKey)} = $pValue;
                    }
                }
                $row->update_time = time();
                $row->save();
            }
            $response['code'] = 200;
            $response['msg'] = '修改成功';
            echo json_encode($response);die;
        }else{
            $list = SalePrice::find()->orderBy(['id' => SORT_ASC])->asArray()->all();
            $magicTypeMap = SalePrice::getVerTypeMap();
            return $this->render('price',[ 'list'=>$list,'magicTypeMap'=>$magicTypeMap ]);
        }
        
    }


    /**
     * @return string
     *
     * 开票设置
     */
    public function actionInvoice()
    {
//        $model = new VatSettion();
        $model = VatSettion::findOne(1);
        if (Yii::$app->request->isPost) {
            /* 表单验证 */
            $data = Yii::$app->request->post('VatSettion');
            $data['update_time'] = time();
            $model->setAttributes($data);
            /* 保存用户数据到数据库 */
            if ($model->save()) {
                $this->success('操作成功');
            }else{
                $this->error('操作错误');
            }
        }

        return $this->render('invoice', [
            'model' => $model,
        ]);
    }
    
    

}
